/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Scorpion
 */
public class TelaGauss extends javax.swing.JInternalFrame {

    int numIncog;
    DefaultTableModel modelo = new DefaultTableModel();
    boolean controle = false;

    public TelaGauss() {
        this.setLocation(230, 30);
        initComponents();
    }

    public int getNumIncog() {
        return numIncog;
    }

    public void setNumIncog(int numIncog) {
        this.numIncog = numIncog;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_matriz = new javax.swing.JTextField();
        bnt_gerarMatriz = new javax.swing.JButton();
        bnt_Limpar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMatriz = new javax.swing.JTable();
        bnt_calcular = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCampo = new javax.swing.JTextArea();
        btn_clearMatriz = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Método de Gauss");

        jLabel1.setText("Informe a ordem da matriz: ");

        txt_matriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_matrizActionPerformed(evt);
            }
        });

        bnt_gerarMatriz.setText("Gerar");
        bnt_gerarMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_gerarMatrizActionPerformed(evt);
            }
        });

        bnt_Limpar.setText("Limpar");
        bnt_Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_LimparActionPerformed(evt);
            }
        });

        tableMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableMatriz);

        bnt_calcular.setText("Calcular");
        bnt_calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnt_calcularActionPerformed(evt);
            }
        });

        txtCampo.setColumns(20);
        txtCampo.setRows(5);
        jScrollPane2.setViewportView(txtCampo);

        btn_clearMatriz.setText("Apagar Matriz");
        btn_clearMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearMatrizActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txt_matriz, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(bnt_gerarMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bnt_Limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_clearMatriz)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bnt_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_matriz, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bnt_gerarMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bnt_Limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_clearMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bnt_calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_matrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_matrizActionPerformed

    }//GEN-LAST:event_txt_matrizActionPerformed

    private void bnt_gerarMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_gerarMatrizActionPerformed
        try {
            this.numIncog = Integer.parseInt(txt_matriz.getText());
            if (numIncog <= 1) {
                throw new Exception("Número de incognitas invalido!");
            }
            Object coluna[] = new Object[numIncog + 1];
            for (int i = 0; i < numIncog + 1; i++) {
                if (i < numIncog) {
                    coluna[i] = "X" + (i + 1);
                } else {
                    coluna[i] = "S";
                }
            }
            modelo = new DefaultTableModel(coluna, numIncog);
            tableMatriz.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }//GEN-LAST:event_bnt_gerarMatrizActionPerformed

    private void bnt_LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_LimparActionPerformed
        txt_matriz.setText(null);
        txtCampo.setText(null);
    }//GEN-LAST:event_bnt_LimparActionPerformed

    private void bnt_calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnt_calcularActionPerformed
        // TODO add your handling code here:
        try {
            int n = this.getNumIncog();
            System.out.println(this.getNumIncog());
            double matCoef[][] = new double[n][n + 1];//Armazena os numeros dos coeficientes inseridos na tabela
            double solucoes[] = new double[n];//Armazena os valores das solucoes de cada equacao
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n + 1; j++) {
                    matCoef[i][j] = Double.parseDouble(String.valueOf(tableMatriz.getValueAt(i, j)));
                }
                solucoes[i] = Double.parseDouble(String.valueOf(tableMatriz.getValueAt(i, n)));
            }
            solucoes = this.calculaGauss(matCoef, n);
            for (int i = 0; i < n; i++) {
                txtCampo.append("X" + (i + 1) + " = " + solucoes[i] + "\n");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro na leitura dos dados da tabela!");
        }


    }//GEN-LAST:event_bnt_calcularActionPerformed


    private void btn_clearMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearMatrizActionPerformed
        modelo.setColumnCount(0);
        modelo.setRowCount(0);
    }//GEN-LAST:event_btn_clearMatrizActionPerformed

    //essa função é utilizada caso o pivô seja igual a zero
    public int tratandoMatriz(double[][] matriz, int ordem, int posicao) {
        int qtdTrocas = 0;//o retorno é quantidade de trocas(de colunas) que ele faz em cada linha
        for (int j = 1; j < ordem - posicao; j++) {
            if (matriz[posicao][posicao] == 0) {
                qtdTrocas++;
                for (int i = 0; i < ordem; i++) {
                    double aux = matriz[i][posicao];
                    matriz[i][posicao] = matriz[i][posicao + j];
                    matriz[i][posicao + j] = aux;
                }
            }
        }
        return qtdTrocas;
    }

    public double[] calculaGauss(double[][] matriz, int ordem) {
        // iniciando nesse "for" o processo completo para transformar a matriz em um
        // sistema triangular equivalente
        int qtdTrocas[] = new int[ordem];//essa vetor/variavel é utilizada para armazenar a quantidade de trocas(de colunas) que ele faz em cada linha
        //não é recursivo, ele faz o processo de triangularização a partir desses "fors" 
        for (int a = 0; a < ordem - 1; a++) {
            if(a == 0){
                 for (int j = 0; j < ordem; j++) {
                for (int k = 0; k < ordem + 1; k++) {
                    txtCampo.append(Double.toString(matriz[j][k]) + "\t");
                }
                txtCampo.append("\n");
            }
            txtCampo.append("____________________________________________________\n");
            }
            qtdTrocas[a] = tratandoMatriz(matriz, ordem, a);
            double m[] = new double[ordem];// multiplicadores
            // pegando os multiplicadores
            for (int b = 0; b < ordem - (1 + a); b++) {
                if (matriz[a][a] == 0) {
                    System.out.println("Sistema Impossivel, uma linhas inteira é igual a zero");
                    return null;
                }
                m[b] = -matriz[1 + b + a][a] / matriz[a][a];
                m[b] = arredondar(m[b]);
            }
            txtCampo.append((a+1)+"º interação:\n");
            
            
            for (int b = 0; b < ordem - (1 + a); b++) {
                txtCampo.append("multiplizacor["+(b+1)+"] = " + m[b] + "\n");
            }
            // alterando as linhas e colunas para transformar em um "sistema triangular equivalente"
            for (int c = 0; c < ordem - (1 + a); c++) {
                txtCampo.append("transformação["+(c+1)+"] = " + arredondar(m[c]) + " * Equação" + (a+1)+ " + Equação" + (c+2+a) + "\n");
                for (int d = 0; d < ordem + 1; d++) {
                    if (arredondar1(m[c] * matriz[a][d]) == -arredondar1(matriz[1 + c + a][d])) {
                        matriz[1 + c + a][d] = arredondar1(m[c] * matriz[a][d]) + arredondar1(matriz[1 + c + a][d]);
                        //txtCampo.append("transformação["+(c+1)+"] = " + arredondar(m[c]) + "*" + arredondar(matriz[a][d]) + " + " + arredondar(matriz[1 + c + a][d]) + "\n");
                    } else {
                        matriz[1 + c + a][d] = arredondar(m[c] * matriz[a][d]) + arredondar(matriz[1 + c + a][d]);
                        matriz[1 + c + a][d] = arredondar(matriz[1 + c + a][d]);
                        //txtCampo.append("transformação["+(c+1)+"] = " + arredondar(m[c]) + "*" + arredondar(matriz[a][d]) + " + " + arredondar(matriz[1 + c + a][d]) + "\n");
                    }
                }
            }
            for (int j = 0; j < ordem; j++) {
                for (int k = 0; k < ordem + 1; k++) {
                    txtCampo.append(Double.toString(matriz[j][k]) + "\t");
                }
                txtCampo.append("\n");
            }
        txtCampo.append("____________________________________________________\n");
        }
         
        double x[] = new double[ordem];
        double z = 0;// Essa varivel vai armazenar uma soma especifica
        // a partir desse for é encontrado o vetor solução (V[x])
        for (int b = ordem - 1; b >= 0; b--) {
            for (int c = ordem; c >= 0; c--) {
                if (((b == ordem - 1) && (c == ordem - 1))) {

                } else {
                    if ((b != c) && (c < ordem)) {
                        z = z + arredondar(matriz[b][c]) * arredondar(x[c]);
                    }
                }
                if (b == c) {
                    x[b] = (matriz[b][ordem] - z) / matriz[b][c];
                    x[b] = arredondar(x[b]);
                    z = 0;
                }
            }
        }

        /*A partir desse ponto são feitas as trocas dos valores de x[i], da maneira correta,
		pois ao decorrer da execução dos programa podem ter sido alterado algumas colunas
		para a finalização do calculo*/
        for (int i = ordem - 1; i >= 0; i--) {
            if (qtdTrocas[i] > 0) {
                for (int a = 0; a < qtdTrocas[i]; a++) {
                    //System.out.println("x[" + i + "] = x[" + (i + qtdTrocas[i] - a) + "]");
                    double aux = x[i];
                    x[i] = x[i + qtdTrocas[i] - a];
                    x[i + qtdTrocas[i] - a] = aux;
                }
            }
        }
        return x;
    }

    //arredondamento com 4 casas
    public double arredondar(double valor) {
        DecimalFormat format = new DecimalFormat("#.##");
        return Double.parseDouble(format.format(valor).replace(',', '.'));
    }

    //arredondamento com 1 casas
    public double arredondar1(double valor) {
        DecimalFormat format = new DecimalFormat("#.#");
        return Double.parseDouble(format.format(valor).replace(',', '.'));
    }

    public void mostraSistema(double[][] matriz, int ordem) {
        for (int i = 0; i < ordem; i++) {
            for (int j = 0; j < ordem + 1; j++) {
                System.out.print(arredondar(matriz[i][j]) + "  ");
            }
            System.out.println("");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnt_Limpar;
    private javax.swing.JButton bnt_calcular;
    private javax.swing.JButton bnt_gerarMatriz;
    private javax.swing.JButton btn_clearMatriz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableMatriz;
    private javax.swing.JTextArea txtCampo;
    private javax.swing.JTextField txt_matriz;
    // End of variables declaration//GEN-END:variables
}
